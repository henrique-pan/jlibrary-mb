/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grasset.view;

import com.grasset.book.Author;
import com.grasset.book.Book;
import com.grasset.book.BookEdition;
import com.grasset.book.BookSample;
import com.grasset.book.BookService;
import com.grasset.book.BookServiceImpl;
import com.grasset.book.Publisher;
import com.grasset.dao.book.BookDAO;
import com.grasset.dao.book.impl.BookDAOImpl;
import com.grasset.view.alerts.JAlertHelper;

import java.awt.Dimension;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import lombok.extern.slf4j.Slf4j;

/**
 * @author henrique
 */
@Slf4j
public class JDialogBookSample extends javax.swing.JDialog {

    private BookService bookService;
    private BookDAO bookDAO = new BookDAOImpl();
    private BookEdition bookEdition;

    public JDialogBookSample(java.awt.Frame parent, boolean modal, BookEdition bookEdition) {
        super(parent, modal);
        initComponents();

        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);

        configureTables();

        bookService = new BookServiceImpl();

        Set<Book> set = bookDAO.findByEdition(bookEdition.getIdBookEdition());
        updateTable(set);
        setBookFields(bookEdition);
        this.bookEdition = bookEdition;

        setEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelBookISBN = new javax.swing.JLabel();
        jLabelBookTitle = new javax.swing.JLabel();
        jLabelBookAuthors = new javax.swing.JLabel();
        jLabelBookYear = new javax.swing.JLabel();
        jLabelBookEditor = new javax.swing.JLabel();
        jTextFieldBookTitle = new javax.swing.JTextField();
        jTextFieldBookAuthors = new javax.swing.JTextField();
        jTextFieldBookYear = new javax.swing.JTextField();
        jTextFieldBookISBN = new javax.swing.JTextField();
        jTextFieldEditor = new javax.swing.JTextField();
        jCheckBoxBookRare = new javax.swing.JCheckBox();
        jLabelBookEdition = new javax.swing.JLabel();
        jTextFieldBookEdition = new javax.swing.JTextField();
        jLabelSampleCode = new javax.swing.JLabel();
        jTextFieldSampleCode = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSample = new javax.swing.JTable();
        jButtonAjouter = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelBookISBN.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookISBN.setText("ISBN:");

        jLabelBookTitle.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookTitle.setText("Titre:");

        jLabelBookAuthors.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookAuthors.setText("Auteur(s):");

        jLabelBookYear.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookYear.setText("Année:");

        jLabelBookEditor.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookEditor.setText("<html><p align=\"center\">Maison</p>d'édition:<html>");

        jTextFieldBookTitle.setEditable(false);

        jTextFieldBookAuthors.setEditable(false);

        jTextFieldBookYear.setEditable(false);

        jTextFieldBookISBN.setEditable(false);

        jTextFieldEditor.setEditable(false);

        jCheckBoxBookRare.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jCheckBoxBookRare.setText("Rare");
        jCheckBoxBookRare.setEnabled(false);

        jLabelBookEdition.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelBookEdition.setText("Édition:");

        jTextFieldBookEdition.setEditable(false);

        jLabelSampleCode.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelSampleCode.setText("<html><p align=\"center\">Code</p>d'examplaire:<html>");

        jTableSample.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cod Sample", "Date Creation", "Date Modification"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSample);

        jButtonAjouter.setText("Ajouter");

        jButtonSupprimer.setText("Supprimer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabelBookTitle)
                .addGap(5, 5, 5)
                .addComponent(jTextFieldBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabelBookYear)
                .addGap(3, 3, 3)
                .addComponent(jTextFieldBookYear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabelBookAuthors)
                .addGap(3, 3, 3)
                .addComponent(jTextFieldBookAuthors, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabelBookISBN)
                .addGap(8, 8, 8)
                .addComponent(jTextFieldBookISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabelBookEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jTextFieldEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabelBookEdition)
                .addGap(0, 0, 0)
                .addComponent(jTextFieldBookEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jLabelSampleCode, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTextFieldSampleCode, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jCheckBoxBookRare))
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jButtonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBookYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelBookTitle)
                            .addComponent(jLabelBookYear))))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldBookAuthors, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBookISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelBookAuthors)
                            .addComponent(jLabelBookISBN))))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelBookEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelBookEdition))
                    .addComponent(jTextFieldBookEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSampleCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSampleCode, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jCheckBoxBookRare)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JCheckBox jCheckBoxBookRare;
    private javax.swing.JLabel jLabelBookAuthors;
    private javax.swing.JLabel jLabelBookEdition;
    private javax.swing.JLabel jLabelBookEditor;
    private javax.swing.JLabel jLabelBookISBN;
    private javax.swing.JLabel jLabelBookTitle;
    private javax.swing.JLabel jLabelBookYear;
    private javax.swing.JLabel jLabelSampleCode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSample;
    private javax.swing.JTextField jTextFieldBookAuthors;
    private javax.swing.JTextField jTextFieldBookEdition;
    private javax.swing.JTextField jTextFieldBookISBN;
    private javax.swing.JTextField jTextFieldBookTitle;
    private javax.swing.JTextField jTextFieldBookYear;
    private javax.swing.JTextField jTextFieldEditor;
    private javax.swing.JTextField jTextFieldSampleCode;
    // End of variables declaration//GEN-END:variables
//JTABLE
    private void configureTables() {
        jTableSample.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jTableSample.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableSample.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTableSample.getColumnModel().getColumn(2).setPreferredWidth(100);
    }

    // BOOK TABLE
    public Integer actualBookSelected = null;

    public void updateBookTable(Set<Book> bookSet) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTableSample.getModel();
        int size = defaultTableModel.getRowCount();
        for (int i = 0; i < size; i++) {
            defaultTableModel.removeRow(0);
        }

        if (!bookSet.isEmpty()) {
            bookSet.stream().map((book) -> {
                BookSample bookSample = (BookSample) book;
                Object[] obj = new Object[3];
                obj[0] = bookSample.getCodeSample();
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                obj[1] = df.format(bookSample.getCreationDate());

                if(bookSample.getModificationDate() != null) {
                    obj[2] = df.format(bookSample.getModificationDate());
                }

                return obj;
            }).forEachOrdered((obj) -> {
                defaultTableModel.addRow(obj);
            });

            actualBookSelected = 0;
            jTableSample.setRowSelectionInterval(0, actualBookSelected);
        }
    }

    public void setBookFields(Book book) {
        if (book != null) {
            BookEdition bookEdition = (BookSample) book;
            jTextFieldBookTitle.setText(bookEdition.getTitle());
            jTextFieldBookYear.setText(String.valueOf(bookEdition.getBookYear()));
            Set<Author> authors = bookEdition.getAuthors();
            if(authors != null && !authors.isEmpty()) {
                List<String> list = new ArrayList<>();
                authors.forEach(author -> {
                    list.add(author.getName());
                });
                jTextFieldBookAuthors.setText(String.join(",", list));
            } else {
                jTextFieldBookAuthors.setText("");
            }
            jTextFieldBookISBN.setText(bookEdition.getISBN());
            jTextFieldEditor.setText(bookEdition.getPublisher().getName());
            jTextFieldBookEdition.setText(bookEdition.getEdition());
            jCheckBoxBookRare.setSelected(bookEdition.isRare());
        }
    }
    // BOOK TABLE

    private void setEvents() {
        // Table Events
        setTableEvents();
        // Button Events
        setButtonEvents();
    }

    private void setButtonEvents() {
        jButtonAjouter.addActionListener(e -> {
            BookSample bookSample = (BookSample) bookEdition;
            try {
                bookSample.setCodeSample(sampleCode());
                bookDAO.persist(bookSample);
                updateTable();
            } catch (Exception exp) {
                JAlertHelper.showError("Erreur de Enregistrement", "Erreur pour faire le enregistrement: " + exp.getMessage());
            }
        });

        jButtonSupprimer.addActionListener(e -> {
            actualBookSelected = jTableSample.getSelectedRow();
            if (jTableSample.getRowCount() > 0 && actualBookSelected != null) {
                actualBookSelected = jTableSample.getSelectedRow();
                String codeSample = (String) jTableSample.getModel().getValueAt(actualBookSelected, 0);
                BookSample bookSample = bookDAO.findByCode(codeSample);
                bookDAO.remove(bookSample);
                updateTable();
            }
        });
    }

    private void setTableEvents() {
        updateTable();
    }

    private void updateTable() {
        try {
            Set<Book> set = bookDAO.findByEdition(bookEdition.getIdBookEdition());
            updateBookTable(set);
        } catch (Exception exp) {
            exp.printStackTrace();
            JAlertHelper.showError("Erreur pour remplir table", "Erreur pour creer table: " + exp.getMessage());
        }
    }

    private void updateTable(Set<Book> set) {
        try {
            updateBookTable(set);
        } catch (Exception exp) {
            exp.printStackTrace();
            JAlertHelper.showError("Erreur pour remplir table", "Erreur pour creer table: " + exp.getMessage());
        }
    }

    private void clear() {
        jTextFieldBookTitle.setText("");
        jTextFieldBookYear.setText("");
        jTextFieldBookAuthors.setText("");
        jTextFieldBookISBN.setText("");
        jTextFieldEditor.setText("");
        jTextFieldBookEdition.setText("");
        jTextFieldSampleCode.setText("");

        jCheckBoxBookRare.setSelected(false);
    }

    // Getters & Setters
    public String bookTitle() {
        return jTextFieldBookTitle.getText();
    }

    public Integer bookYear() {
        return Integer.parseInt(jTextFieldBookYear.getText());
    }

    public String bookISBN() {
        return jTextFieldBookISBN.getText();
    }

    public String bookEditor() {
        return jTextFieldEditor.getText();
    }

    public String edition() {
        return jTextFieldBookEdition.getText();
    }

    public String sampleCode() {
        return jTextFieldSampleCode.getText();
    }

    public boolean isRare() {
        return jCheckBoxBookRare.isSelected();
    }

    public List<String> bookAuthors() {
        jTextFieldBookAuthors.getText();
        return new ArrayList<String>();
    }
}
